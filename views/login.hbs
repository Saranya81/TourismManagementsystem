<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Lexend:wght@400;500;600;700&display=swap');

        body {
    
    background-size: cover;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #539bad;
    background-image: url(/userImages/woman-hand-holding-camera-standing-top-rock-nature-travel-concept.jpg);
    background-blend-mode: multiply;
    background-position: center;
    font-family: 'Lexend', sans-serif;
}
        :root {
    /*========== Colors ==========*/
    --white-color: hsl(0, 0%, 100%);
    --black-color: hsl(0, 0%, 0%);
    --h1-font-size: 1.75rem;
      font-family: 'Lexend', sans-serif;
    --normal-font-size: 1rem;
    --small-font-size: .813rem;
    /*========== Font weight ==========*/
    --font-medium: 500;
  }
  
  /*=============== BASE ===============*/
  * {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    
  }
  
  body,
  input,
  button {
    font-size: var(--normal-font-size);
    font-family: var(--body-font);
  }
  
  body {
    color: var(--white-color);
  }
  
  input,
  button {
    border: none;
    outline: none;
  }
  
  a {
    text-decoration: none;
  }
  
  img {
    max-width: 100%;
    height: auto;
  }
  
  /*=============== LOGIN ===============*/
  .login {
    position: relative;
    height: 100vh;
    display: grid;
    align-items: center;
  }
  .login__img {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  .close-icon {
    position: absolute;
    top: 0;
    right: 0;
    cursor: pointer;
    margin-top: 10px; /* Adjust as needed for spacing */
    margin-right: 20px; /* Adjust as needed for spacing */
}
  .login__form {
    position: relative;
    background-color: hsla(120, 2%, 11%, 0.1);
    border: 2px solid var(--white-color);
    margin-inline: 1.5rem;
    padding: 2.5rem 1.5rem;
    border-radius: 1rem;
    backdrop-filter: blur(8px);
  }
  .login__title {
    text-align: center;
    font-size: var(--h1-font-size);
    font-weight: var(--font-medium);
    margin-bottom: 2rem;
  }
  .login__content, .login__box {
    display: grid;
  }
  .login__content {
    row-gap: 1.75rem;
    margin-bottom: 1.5rem;
  }
  .login__box {
    grid-template-columns: max-content 1fr;
    align-items: center;
    column-gap: 0.75rem;
    border-bottom: 2px solid var(--white-color);
  }
  .login__icon, .login__eye {
    font-size:1.25rem;
  }
  .login__input {
    width: 100%;
    padding-block: 0.8rem;
    background: none;
    color: var(--white-color);
    position: relative;
    z-index: 1;
  }
  .login__box-input {
    position: relative;
  }
  .login__label {
    position: absolute;
    left: 0;
    top: 13px;
    font-weight: var(--font-medium);
    transition: top 0.3s, font-size 0.3s;
  }
  .login__eye {
    position: absolute;
    right: 0;
    top: 18px;
    z-index: 10;
    cursor: pointer;
  }
  .login__box:nth-child(2) input {
    padding-right: 1.8rem;
  }
  .login__check, .login__check-group {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .login__check {
    margin-bottom: 1.5rem;
  }
  .login__check-label, .login__forgot, .login__register {
    font-size: var(--small-font-size);
  }
  .login__check-group {
    column-gap: 0.5rem;
  }
  .login__check-input {
    width: 16px;
    height: 16px;
  }
  .login__forgot {
    color: var(--white-color);
  }
  .login__forgot:hover {
    text-decoration: underline;
  }
  .login__button {
    width: 100%;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--white-color);
    font-weight: var(--font-medium);
    cursor: pointer;
    margin-bottom: 2rem;
    margin-top: 1rem;
  }
  .login__register {
    text-align: center;
  }
  .login__register a {
    color: var(--white-color);
    font-weight: var(--font-medium);
  }
  .login__register a:hover {
    text-decoration: underline;
  }
  
  /* Input focus move up label */
  .login__input:focus + .login__label {
    top: -12px;
    font-size: var(--small-font-size);
  }
  
  /* Input focus sticky top label */
  .login__input:not(:placeholder-shown).login__input:not(:focus) + .login__label {
    top: -12px;
    font-size: var(--small-font-size);
  }
  .icon-left {
    font-size: 30px;
    position: fixed;
    top: 0;
    left: 0;
    color: white;
    cursor: pointer;
}
.back-to-home {
    position: fixed;
    top: 50px; /* Adjust as needed */
    left: 5px; /* Adjust as needed */
    display: none; 
    /* Initially hide the text */
}

.icon-container:hover .back-to-home {
            display: inline-block; /* Show the text when icon is hovered */
        }
.error{
  color:red;
  
  text-align: center;
}
.good{
    color:rgb(5, 175, 56);
  
  text-align: center;}
  /*=============== BREAKPOINTS ===============*/
  /* For medium devices */
  @media screen and (min-width: 576px) {
    .login {
      justify-content: center;
    }
    .login__form {
      width: 432px;
      padding: 4rem 3rem 3.5rem;
      border-radius: 1.5rem;
    }
    .login__title {
      font-size: 2rem;
    }
  }
  
    </style>

</head>
<body>
  <div class="icon-container">
            <a href="javascript:history.back()"><i class="ri-arrow-left-line icon-left"></i></a>
            <span class="back-to-home">back</span>
        </div>
 <div class="login-form">
        <div class="login">
          <form action="/auth/login" method="POST" autocomplete="off" class="login__form"> 
                  
            {{!-- <i class="ri-close-fill close-icon"></i> --}}
             <h1 class="login__title">Login</h1>
               {{#if msg}}
        <p class="{{msg_type}}">{{msg}}</p>

        {{/if}}
            <div class="login__content">
                <div class="login__box">
                   <i class="ri-user-3-line login__icon"></i>
 
               <div class="login__box-input">
                        <input type="text" required class="login__input" id="login-email" name="email" autocomplete="off"  placeholder=" ">
                      <label for="login-email" class="login__label">Email</label>
                   </div>
 {{!-- <p class="error-message" id="emailError"></p> --}}

                </div>
 
                <div class="login__box">
                   <i class="ri-lock-2-line login__icon"></i>
 
                   <div class="login__box-input">
                      
                      <input type="password" required class="login__input" id="login-pass" name="password" autocomplete="off" placeholder=" " autocomplete="current-password">
                      <label for="login-pass" class="login__label">Password</label>
                      <i class="ri-eye-off-line login__eye" id="login-eye"></i>
                     
                   </div>
                        {{!-- <p class="error-message" id="passwordError"></p> --}}
                </div>
             </div>
            <div class="login__message" id="login-message"></div>
             {{!-- <div class="login__check">
                <div class="login__check-group">
               <input type="checkbox" class="login__check-input" id="login-check">
                   <label for="login-check" class="login__check-label">Remember me</label>
                </div>
 
                <a href="#" class="login__forgot">Forgot Password?</a>
             </div> --}}
 
             <button type="submit" class="login__button">Login</button>
             <!-- <button id="login-button" type="button" class="login__button">Login</button> -->

             <p class="login__register">
                Don't have an account? <a href="/register">Register now</a>
             </p>
          </form>
       </div>
      </div>
        <p class="error-message" id="loginError"></p>
       
      </div>

    <script>
      

      document.addEventListener("DOMContentLoaded", function() {
       
    function togglePasswordVisibility(inputId, eyeIconId) {
        console.log("Toggle function triggered.");
        var passwordInput = document.getElementById(inputId);
        var eyeIcon = document.getElementById(eyeIconId);

        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            eyeIcon.classList.remove("ri-eye-off-line");
            eyeIcon.classList.add("ri-eye-line");
        } else {
            passwordInput.type = "password";
            eyeIcon.classList.remove("ri-eye-line");
            eyeIcon.classList.add("ri-eye-off-line");
        }
    }

    // Adding event listener to both eye icons
    document.getElementById("login-eye").addEventListener("click", function() {
        console.log("Login eye clicked.");
        togglePasswordVisibility("login-pass", "login-eye");
    });

    document.getElementById("confirm-eye").addEventListener("click", function() {
        console.log("Confirm eye clicked.");
        togglePasswordVisibility("confirm-pass", "confirm-eye");
    });
     });




     document.getElementById('loginForm').addEventListener('submit', async function (event) {
    event.preventDefault();

    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-pass').value;
    console.log("Login form submitted with email:", email);
{{!-- 
    try {
        const response = await fetch('/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });

        const data = await response.json();
        console.log(data);

        if (response.status === 200) {
            window.location.href = '/index';
        } else {
              if (data.message.includes('email')) {
                        document.getElementById('emailError').textContent = data.message;
                    } else if (data.message.includes('Password')) {
                        document.getElementById('passwordError').textContent = data.message;
                    } else {
                        document.getElementById('loginError').textContent = data.message;
                    }
        }
    } catch (error) {
        console.error('Error:', error);
    } --}}
    try {
    const response = await fetch('/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
    });

    if (!response.ok) {
        throw new Error('Failed to fetch');
    }

    const data = await response.json();

    // Check if data is received
    if (data) {
        // Data received, handle it
        console.log('Data received:', data);
        if (response.status === 200) {
            // Handle successful login
            console.log(data.message); // Log the success message
            // Redirect or perform any other actions
        } else {
            // Handle login error
            console.error(data.message); // Log the error message
            // Display error message to the user or take appropriate actions
        }
    } else {
        // Data not received
        throw new Error('Empty response');
    }
} catch (error) {
    console.error('Error:', error);
}

});

</script>

</body>
</html>